# main/models.py
from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from datetime import date
from django.contrib.auth.models import AbstractUser
from django.utils import timezone
import secrets
import hashlib
import time
from datetime import timedelta
from django.conf import settings

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE) 
    phone = models.CharField(max_length=20, blank=True, null=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    company = models.CharField(max_length=100, blank=True, verbose_name='–ö–æ–º–ø–∞–Ω–∏—è')
    position = models.CharField(max_length=100, blank=True, verbose_name='–î–æ–ª–∂–Ω–æ—Å—Ç—å')
    date_of_birth = models.DateField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
    avatar = models.ImageField(upload_to='avatars/', blank=True, null=True, verbose_name='–ê–≤–∞—Ç–∞—Ä')
    
    # –ü–æ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    phone_verified = models.BooleanField(default=False, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
    sms_code = models.CharField(max_length=6, blank=True, null=True, verbose_name='–ö–æ–¥ –∏–∑ SMS')
    sms_code_expires = models.DateTimeField(blank=True, null=True, verbose_name='–ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ')
    reset_token = models.CharField(max_length=100, blank=True, null=True, verbose_name='–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞')
    reset_token_expires = models.DateTimeField(blank=True, null=True, verbose_name='–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ')
    
    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å {self.user.username}"
    
    def age(self):
        if self.date_of_birth:
            today = date.today()
            return today.year - self.date_of_birth.year - ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day))
        return None
    
    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

class Address(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞", default="–û—Å–Ω–æ–≤–Ω–æ–π")
    full_name = models.CharField(max_length=200, verbose_name="–§–ò–û")
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    address = models.TextField(verbose_name="–ê–¥—Ä–µ—Å")
    city = models.CharField(max_length=100, verbose_name="–ì–æ—Ä–æ–¥")
    postal_code = models.CharField(max_length=20, verbose_name="–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å")
    is_default = models.BooleanField(default=False, verbose_name="–ê–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def __str__(self):
        return f"{self.title} - {self.city}"
    
    def save(self, *args, **kwargs):
        if self.is_default:
            Address.objects.filter(user=self.user, is_default=True).update(is_default=False)
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name = "–ê–¥—Ä–µ—Å"
        verbose_name_plural = "–ê–¥—Ä–µ—Å–∞"

# models.py - –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å Product
class Product(models.Model):
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–¶–µ–Ω–∞")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    quantity = models.IntegerField(default=0, verbose_name="–û—Å—Ç–∞—Ç–æ–∫")
    category = models.CharField(max_length=100, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", blank=True)
    article = models.CharField(max_length=50, verbose_name="–ê—Ä—Ç–∏–∫—É–ª", blank=True)
    image = models.ImageField(upload_to='products/', verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", blank=True, null=True)
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω—ã–π")
    
    brand = models.CharField(max_length=100, verbose_name="–ë—Ä–µ–Ω–¥", blank=True)
    rating = models.DecimalField(max_digits=3, decimal_places=2, default=0, verbose_name="–†–µ–π—Ç–∏–Ω–≥")
    popularity = models.IntegerField(default=0, verbose_name="–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    weight = models.DecimalField(max_digits=8, decimal_places=2, null=True, blank=True, verbose_name="–í–µ—Å")
    dimensions = models.CharField(max_length=50, blank=True, verbose_name="–ì–∞–±–∞—Ä–∏—Ç—ã")
    material = models.CharField(max_length=100, blank=True, verbose_name="–ú–∞—Ç–µ—Ä–∏–∞–ª")
    warranty = models.IntegerField(default=12, verbose_name="–ì–∞—Ä–∞–Ω—Ç–∏—è (–º–µ—Å)")
    
    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"
        ordering = ['name']

class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    
    def __str__(self):
        return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user.username}"
    
    def get_total_price(self):
        return sum(item.get_total_price() for item in self.cartitem_set.all())
    
    def get_items_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        return sum(item.quantity for item in self.cartitem_set.all())
    
    def get_total_quantity(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π (—Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤) –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        return self.cartitem_set.count()
    
    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, verbose_name="–ö–æ—Ä–∑–∏–Ω–∞")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–¢–æ–≤–∞—Ä")
    quantity = models.PositiveIntegerField(default=1, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    
    def __str__(self):
        return f"{self.product.name} x {self.quantity}"
    
    def get_total_price(self):
        return self.product.price * self.quantity
    
    class Meta:
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã"

class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'),
        ('paid', '–û–ø–ª–∞—á–µ–Ω'),
        ('processing', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        ('assembling', '–°–æ–±–∏—Ä–∞–µ—Ç—Å—è'),
        ('ready_for_shipping', '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ'),
        ('shipped', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
        ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
        ('refunded', '–í–æ–∑–≤—Ä–∞—Ç'),
    ]
    
    PAYMENT_METHODS = [
        ('card', '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'),
        ('invoice', '–ü–æ —Å—á–µ—Ç—É'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–û–±—â–∞—è —Å—É–º–º–∞")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name="–°—Ç–∞—Ç—É—Å")
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHODS, default='card', verbose_name="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
    payment_id = models.CharField(max_length=100, blank=True, verbose_name="ID –ø–ª–∞—Ç–µ–∂–∞")
    
    # –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    customer_name = models.CharField(max_length=100, verbose_name="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    customer_phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    customer_email = models.EmailField(verbose_name="Email")
    delivery_address = models.TextField(verbose_name="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    status_changed_at = models.DateTimeField(auto_now=True, verbose_name="–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ auto_now
    tracking_number = models.CharField(max_length=100, blank=True, verbose_name="–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä")
    shipping_company = models.CharField(max_length=100, blank=True, verbose_name="–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    estimated_delivery = models.DateField(null=True, blank=True, verbose_name="–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    # –¢–∞–π–º—Å—Ç–∞–º–ø—ã
    paid_at = models.DateTimeField(null=True, blank=True, verbose_name="–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã")
    cancelled_at = models.DateTimeField(null=True, blank=True, verbose_name="–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã")
    
    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.id} - {self.customer_name}"
    
    def can_be_cancelled(self):
        """–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        from django.utils import timezone
        if self.status == 'paid' and self.paid_at:
            return (timezone.now() - self.paid_at).total_seconds() < 3600  # —á–∞—Å
        return False
    
    def get_status_timeline(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É —Å—Ç–∞—Ç—É—Å–æ–≤"""
        return {
            'paid': {'title': '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞', 'description': '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', 'icon': 'üí∞'},
            'processing': {'title': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞', 'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π', 'icon': 'üìã'},
            'assembling': {'title': '–°–±–æ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞', 'description': '–°–æ–±–∏—Ä–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑', 'icon': 'üõ†Ô∏è'},
            'ready_for_shipping': {'title': '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ', 'description': '–ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∞–Ω', 'icon': 'üì¶'},
            'shipped': {'title': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'description': '–ü–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏', 'icon': 'üöö'},
            'delivered': {'title': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω', 'description': '–¢–æ–≤–∞—Ä —É –≤–∞—Å', 'icon': 'üè†'},
            'completed': {'title': '–ó–∞–≤–µ—Ä—à–µ–Ω', 'description': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'icon': '‚úÖ'}
        }
    
    def get_current_timeline(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ"""
        timeline = self.get_status_timeline()
        status_flow = ['paid', 'processing', 'assembling', 'ready_for_shipping', 'shipped', 'delivered', 'completed']
        
        try:
            current_index = status_flow.index(self.status) if self.status in status_flow else -1
        except ValueError:
            current_index = -1
            
        result = {}
        
        for status_key, status_info in timeline.items():
            try:
                status_index = status_flow.index(status_key)
                is_completed = status_index <= current_index
                is_current = status_index == current_index
                
                result[status_key] = {
                    **status_info,
                    'completed': is_completed,
                    'current': is_current,
                    'order': status_index + 1
                }
            except ValueError:
                continue
        
        return result
    
    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ status_changed_at –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        if self.pk:
            old_status = Order.objects.get(pk=self.pk).status
            if old_status != self.status:
                self.status_changed_at = timezone.now()
        super().save(*args, **kwargs)
    
    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"

class OrderStatusLog(models.Model):
    """–õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order = models.ForeignKey(Order, on_delete=models.CASCADE, verbose_name="–ó–∞–∫–∞–∑")
    old_status = models.CharField(max_length=20, choices=Order.STATUS_CHOICES, verbose_name="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    new_status = models.CharField(max_length=20, choices=Order.STATUS_CHOICES, verbose_name="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å")
    changed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, verbose_name="–ò–∑–º–µ–Ω–∏–ª")
    changed_at = models.DateTimeField(auto_now_add=True, verbose_name="–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    notes = models.TextField(blank=True, verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
    
    def __str__(self):
        return f"–õ–æ–≥ #{self.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{self.order.id}"
    
    class Meta:
        verbose_name = "–õ–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
        verbose_name_plural = "–õ–æ–≥–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"
        ordering = ['-changed_at']

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, verbose_name="–ó–∞–∫–∞–∑")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–¢–æ–≤–∞—Ä")
    quantity = models.PositiveIntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–¶–µ–Ω–∞")
    
    def __str__(self):
        return f"{self.product.name} x {self.quantity}"
    
    def get_total_price(self):
        if self.price is not None and self.quantity is not None:
            return self.price * self.quantity
        return 0 
    
    class Meta:
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞"

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.get_or_create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    profile, created = UserProfile.objects.get_or_create(user=instance)
    if not created:
        profile.save()

class NotificationLog(models.Model):
    NOTIFICATION_TYPES = [
        ('order_created', '–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑'),
        ('payment_success', '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞'),
        ('order_cancelled', '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'),
        ('telegram_sent', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram'),
        ('email_sent', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ email'),
        ('webhook_received', '–ü–æ–ª—É—á–µ–Ω webhook'),
        ('contact_form', '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'), 
    ]
    
    order = models.ForeignKey(Order, on_delete=models.CASCADE, verbose_name="–ó–∞–∫–∞–∑", null=True, blank=True)
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, verbose_name="–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    message = models.TextField(verbose_name="–°–æ–æ–±—â–µ–Ω–∏–µ")
    sent_to = models.CharField(max_length=200, verbose_name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å", blank=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    success = models.BooleanField(default=True, verbose_name="–£—Å–ø–µ—à–Ω–æ")
    error_message = models.TextField(verbose_name="–û—à–∏–±–∫–∞", blank=True)
    
    def __str__(self):
        if self.order:
            return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{self.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{self.order.id}"
        else:
            return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{self.id} (–±–µ–∑ –∑–∞–∫–∞–∑–∞)"
    
    class Meta:
        verbose_name = "–õ–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        verbose_name_plural = "–õ–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        ordering = ['-created_at']

class LoginAttempt(models.Model):
    username = models.CharField(max_length=150)
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    success = models.BooleanField(default=False)
    
    @classmethod
    def is_ip_blocked(cls, ip_address):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        time_threshold = timezone.now() - timedelta(minutes=15)
        failed_attempts = cls.objects.filter(
            ip_address=ip_address,
            timestamp__gte=time_threshold,
            success=False
        ).count()
        return failed_attempts >= 5
    
class SecurityLog(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    action = models.CharField(max_length=100)
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    success = models.BooleanField(default=True)

class PasswordResetToken(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    token = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField()
    used = models.BooleanField(default=False)
    ip_address = models.GenericIPAddressField()

class Wishlist(models.Model):
    """–ú–æ–¥–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    
    def __str__(self):
        return f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ {self.user.username}"
    
    def get_items_count(self):
        return self.wishlistitem_set.count()
    
    class Meta:
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"

class WishlistItem(models.Model):
    """–≠–ª–µ–º–µ–Ω—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    wishlist = models.ForeignKey(Wishlist, on_delete=models.CASCADE, verbose_name="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–¢–æ–≤–∞—Ä")
    added_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    
    def __str__(self):
        return f"{self.product.name} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º {self.wishlist.user.username}"
    
    class Meta:
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
        unique_together = ['wishlist', 'product']  # –û–¥–∏–Ω —Ç–æ–≤–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

# –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@receiver(post_save, sender=User)
def create_user_wishlist(sender, instance, created, **kwargs):
    if created:
        Wishlist.objects.get_or_create(user=instance)

class ProductReview(models.Model):
    RATING_CHOICES = [
        (1, '1 - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ'),
        (2, '2 - –ü–ª–æ—Ö–æ'),
        (3, '3 - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'),
        (4, '4 - –•–æ—Ä–æ—à–æ'),
        (5, '5 - –û—Ç–ª–∏—á–Ω–æ'),
    ]
    
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–¢–æ–≤–∞—Ä")
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    rating = models.PositiveSmallIntegerField(choices=RATING_CHOICES, verbose_name="–†–µ–π—Ç–∏–Ω–≥")
    comment = models.TextField(verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", max_length=1000)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    is_approved = models.BooleanField(default=False, verbose_name="–û–¥–æ–±—Ä–µ–Ω")
    is_moderated = models.BooleanField(default=False, verbose_name="–ü—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö"
        ordering = ['-created_at']
        unique_together = ['product', 'user']  # –û–¥–∏–Ω –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    def __str__(self):
        return f"–û—Ç–∑—ã–≤ {self.user.username} –Ω–∞ {self.product.name} ({self.rating}/5)"
    
    def save(self, *args, **kwargs):
        if not self.is_moderated:
            self.is_approved = False
        super().save(*args, **kwargs)
    
    @classmethod
    def can_user_review(cls, user, product):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä"""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not user.is_authenticated:
            return False
        
        if settings.DEBUG:
            has_reviewed = cls.objects.filter(user=user, product=product).exists()
            return not has_reviewed
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        has_purchased = OrderItem.objects.filter(
            order__user=user,
            order__status__in=['paid', 'processing', 'assembling', 'ready_for_shipping', 'shipped', 'delivered', 'completed'],
            product=product
        ).exists()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
        has_reviewed = cls.objects.filter(user=user, product=product).exists()
        
        return has_purchased and not has_reviewed
    
    @classmethod
    def get_approved_reviews(cls, product):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        return cls.objects.filter(product=product, is_approved=True)
    
    @classmethod
    def get_average_rating(cls, product):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞"""
        from django.db.models import Avg
        result = cls.objects.filter(
            product=product, 
            is_approved=True
        ).aggregate(average=Avg('rating'))
        return result['average'] or 0