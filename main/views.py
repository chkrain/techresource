# main/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from django.contrib.auth import login
from django.utils import timezone
import json
import requests
from .models import NotificationLog
import uuid
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt

from .models import Product, Cart, CartItem, Order, OrderItem, UserProfile, Address
from .forms import UserRegisterForm, UserProfileForm, AddressForm

# –ò–º–ø–æ—Ä—Ç –Æ–ö–∞—Å—Å—ã
from yookassa import Payment, Configuration
from django.db.models import Sum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Æ–ö–∞—Å—Å—ã
Configuration.account_id = settings.YOOKASSA_SHOP_ID
Configuration.secret_key = settings.YOOKASSA_SECRET_KEY

def index(request):
    featured_products = Product.objects.filter(is_active=True, quantity__gt=0)[:6]
    return render(request, 'main/index.html', {'featured_products': featured_products})

def about(request):
    return render(request, 'main/about.html')

def services(request):
    return render(request, 'main/services.html')

@login_required
def admin_dashboard(request):
    if not request.user.is_staff:
        return redirect('index')
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    orders = Order.objects.all().order_by('-created_at')
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status_filter = request.GET.get('status')
    if status_filter:
        orders = orders.filter(status=status_filter)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
    date_filter = request.GET.get('date')
    if date_filter:
        orders = orders.filter(created_at__date=date_filter)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_orders = Order.objects.count()
    pending_orders = Order.objects.filter(status='pending').count()
    paid_orders = Order.objects.filter(status='paid').count()
    
    # –í—ã—Ä—É—á–∫–∞ (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    total_revenue = Order.objects.filter(status='paid').aggregate(
        total=Sum('total_price')
    )['total'] or 0
    
    context = {
        'orders': orders,
        'total_orders': total_orders,
        'pending_orders': pending_orders,
        'paid_orders': paid_orders,
        'total_revenue': total_revenue,
        'status_choices': Order.STATUS_CHOICES,
        'selected_status': status_filter,
        'selected_date': date_filter,
    }
    
    return render(request, 'main/admin_dashboard.html', context)

def products(request):
    search_query = request.GET.get('search', '')
    category_filter = request.GET.get('category', '')
    
    products_list = Product.objects.filter(is_active=True)
    
    if search_query:
        products_list = products_list.filter(name__icontains=search_query)
    
    if category_filter:
        products_list = products_list.filter(category=category_filter)
    
    categories = Product.objects.filter(is_active=True).values_list('category', flat=True).distinct()
    
    context = {
        'products': products_list,
        'categories': categories,
        'search_query': search_query,
        'selected_category': category_filter,
    }
    return render(request, 'main/products.html', context)

def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')
            return redirect('profile')
    else:
        form = UserRegisterForm()
    return render(request, 'main/register.html', {'form': form})

@login_required
def profile(request):
    profile, created = UserProfile.objects.get_or_create(user=request.user)
    addresses = Address.objects.filter(user=request.user)
    
    if request.method == 'POST':
        profile_form = UserProfileForm(request.POST, instance=profile)
        address_form = AddressForm(request.POST)
        
        if 'update_profile' in request.POST and profile_form.is_valid():
            profile_form.save()
            messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω')
            return redirect('profile')
        
        elif 'add_address' in request.POST and address_form.is_valid():
            address = address_form.save(commit=False)
            address.user = request.user
            address.save()
            messages.success(request, '–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω')
            return redirect('profile')
    
    else:
        profile_form = UserProfileForm(instance=profile)
        address_form = AddressForm()
    
    context = {
        'profile_form': profile_form,
        'address_form': address_form,
        'addresses': addresses,
    }
    return render(request, 'main/profile.html', context)

@login_required
def delete_address(request, address_id):
    address = get_object_or_404(Address, id=address_id, user=request.user)
    address.delete()
    messages.success(request, '–ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω')
    return redirect('profile')

@login_required
def add_to_cart(request, product_id):
    if request.method == 'POST':
        product = get_object_or_404(Product, id=product_id, is_active=True)
        
        if product.quantity <= 0:
            messages.error(request, '–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ')
            return redirect('products')
        
        cart, created = Cart.objects.get_or_create(user=request.user)
        
        cart_item, created = CartItem.objects.get_or_create(
            cart=cart,
            product=product,
            defaults={'quantity': 1}
        )
        
        if not created:
            if cart_item.quantity < product.quantity:
                cart_item.quantity += 1
                cart_item.save()
                messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
            else:
                messages.error(request, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏')
        else:
            messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
        
        return redirect('products')

@login_required
def cart_view(request):
    cart, created = Cart.objects.get_or_create(user=request.user)
    cart_items = cart.cartitem_set.all()
    addresses = Address.objects.filter(user=request.user)
    
    if request.method == 'POST':
        address_id = request.POST.get('address_id')
        payment_method = request.POST.get('payment_method')
        
        if not address_id or not payment_method:
            messages.error(request, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
            return redirect('cart')
        
        address = get_object_or_404(Address, id=address_id, user=request.user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        for cart_item in cart_items:
            if cart_item.quantity > cart_item.product.quantity:
                messages.error(request, f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "{cart_item.product.name}" –≤ –Ω–∞–ª–∏—á–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ: {cart_item.product.quantity} —à—Ç.')
                return redirect('cart')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order.objects.create(
            user=request.user,
            total_price=cart.get_total_price(),
            payment_method=payment_method,
            customer_name=address.full_name,
            customer_phone=address.phone,
            customer_email=request.user.email,
            delivery_address=f"{address.city}, {address.address}, {address.postal_code}"
        )
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑
        for cart_item in cart_items:
            OrderItem.objects.create(
                order=order,
                product=cart_item.product,
                quantity=cart_item.quantity,
                price=cart_item.product.price
            )
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart_items.delete()
        
        if payment_method == 'card':
            return redirect('create_payment', order_id=order.id)
        else:
            # –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ —Å—á–µ—Ç—É —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω (—Ç.–∫. –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∑–∂–µ)
            order.status = 'processing'
            order.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –ø–æ —Å—á–µ—Ç—É
            send_invoice_order_notification(order)
            
            messages.success(request, f'–ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω! –ú—ã –≤—ã—à–ª–µ–º —Å—á–µ—Ç –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É {request.user.email}.')
            return redirect('orders')
    
    context = {
        'cart': cart,
        'cart_items': cart_items,
        'addresses': addresses,
    }
    return render(request, 'main/cart.html', context)


def send_invoice_order_notification(order):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ —Å—á–µ—Ç—É"""
    try:
        if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        message = f"""
üìÑ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –ü–û –°–ß–ï–¢–£ #{order.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.customer_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.customer_phone}
üìß <b>Email:</b> {order.customer_email}
üí∞ <b>–°—É–º–º–∞:</b> {order.total_price} —Ä—É–±.
üöö <b>–ê–¥—Ä–µ—Å:</b> {order.delivery_address}
üì¶ <b>–°—Ç–∞—Ç—É—Å:</b> {order.get_status_display()}

<b>–¢–æ–≤–∞—Ä—ã:</b>
"""
        
        for item in order.orderitem_set.all():
            message += f"‚Ä¢ {item.product.name} x{item.quantity} - {item.get_total_price()} —Ä—É–±.\n"
        
        message += f"\n<b>–ò—Ç–æ–≥–æ:</b> {order.total_price} —Ä—É–±."
        message += f"\n\nüí° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': settings.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ —Å—á–µ—Ç—É: {e}")
        return False

@login_required
def update_cart_item(request, item_id):
    if request.method == 'POST':
        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)
        action = request.POST.get('action')
        
        if action == 'increase':
            if cart_item.quantity < cart_item.product.quantity:
                cart_item.quantity += 1
                cart_item.save()
        elif action == 'decrease':
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                cart_item.save()
            else:
                cart_item.delete()
        elif action == 'remove':
            cart_item.delete()
        
        return redirect('cart')

@login_required
def create_payment(request, order_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Æ–ö–∞—Å—Å–µ"""
    order = get_object_or_404(Order, id=order_id, user=request.user, status='pending')
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —á–µ–∫–∞
        items = []
        for item in order.orderitem_set.all():
            items.append({
                "description": item.product.name[:128],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
                "quantity": str(item.quantity),
                "amount": {
                    "value": f"{item.price:.2f}",
                    "currency": "RUB"
                },
                "vat_code": "1",  # –ù–î–° 20%
            })
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment.create({
            "amount": {
                "value": f"{order.total_price:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"{request.scheme}://{request.get_host()}/payment/success/{order.id}/"
            },
            "capture": True,
            "description": f"–ó–∞–∫–∞–∑ #{order.id}",
            "metadata": {
                "order_id": order.id,
                "user_id": request.user.id
            },
            "receipt": {
                "customer": {
                    "email": order.customer_email
                },
                "items": items
            }
        }, str(uuid.uuid4()))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∑–∞–∫–∞–∑–µ
        order.payment_id = payment.id
        order.save()
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –Æ–ö–∞—Å—Å—ã
        return redirect(payment.confirmation.confirmation_url)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}')
        return redirect('orders')

@login_required
def payment_success(request, order_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    try:
        payment = Payment.find_one(order.payment_id)
        
        if payment.status == 'succeeded':
            if order.status != 'paid':
                order.status = 'paid'
                order.paid_at = timezone.now()
                order.save()
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                for item in order.orderitem_set.all():
                    item.product.quantity -= item.quantity
                    item.product.save()
                
                send_order_notification(order)
                messages.success(request, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.')
        elif payment.status == 'canceled':
            if order.status != 'cancelled':
                order.status = 'cancelled'
                order.save()
                messages.error(request, '–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.')
        elif payment.status == 'pending':
            messages.info(request, '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.')
        else:
            messages.warning(request, f'–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}')
            
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}')
    
    return render(request, 'main/payment_success.html', {'order': order})

@csrf_exempt
def yookassa_webhook(request):
    """Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Æ–ö–∞—Å—Å—ã"""
    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Æ–ö–∞—Å—Å—ã
            event_json = json.loads(request.body.decode('utf-8'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            # –î–ª—è –¥–µ–º–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_type = event_json.get('event')
            
            if event_type == 'payment.succeeded':
                payment_id = event_json['object']['id']
                
                # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ payment_id
                try:
                    order = Order.objects.get(payment_id=payment_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
                    if order.status != 'paid':
                        order.status = 'paid'
                        order.paid_at = timezone.now()
                        order.save()
                        
                        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                        for item in order.orderitem_set.all():
                            if item.product.quantity >= item.quantity:
                                item.product.quantity -= item.quantity
                                item.product.save()
                            else:
                                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {item.product.name} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        send_order_notification(order)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        NotificationLog.objects.create(
                            order=order,
                            notification_type='payment_success',
                            message=f'–ó–∞–∫–∞–∑ #{order.id} –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ webhook',
                            sent_to=order.customer_email
                        )
                        
                        print(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ webhook")
                    
                except Order.DoesNotExist:
                    print(f"‚ùå –ó–∞–∫–∞–∑ —Å payment_id {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return JsonResponse({'status': 'order not found'}, status=404)
            
            elif event_type == 'payment.canceled':
                payment_id = event_json['object']['id']
                try:
                    order = Order.objects.get(payment_id=payment_id)
                    if order.status != 'cancelled':
                        order.status = 'cancelled'
                        order.save()
                        print(f"‚ùå –ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ webhook")
                except Order.DoesNotExist:
                    pass
            
            return JsonResponse({'status': 'ok'})
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)
    
    return JsonResponse({'status': 'method not allowed'}, status=405)

@login_required
def cancel_order(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    
    if order.can_be_cancelled():
        order.status = 'cancelled'
        order.cancelled_at = timezone.now()
        order.save()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        for item in order.orderitem_set.all():
            item.product.quantity += item.quantity
            item.product.save()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        send_cancellation_notification(order)
        
        messages.success(request, f'–ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.')
    else:
        messages.error(request, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –°—Ä–æ–∫ –æ—Ç–º–µ–Ω—ã –∏—Å—Ç–µ–∫.')
    
    return redirect('orders')

@login_required
def orders_view(request):
    orders = Order.objects.filter(user=request.user).order_by('-created_at')
    return render(request, 'main/orders.html', {'orders': orders})

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_order_notification(order):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
            print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            NotificationLog.objects.create(
                order=order,
                notification_type='telegram_sent',
                message='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
                success=False,
                error_message='TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
            )
            return False
            
        message = f"""
üõí <b>–ù–û–í–´–ô –û–ü–õ–ê–ß–ï–ù–ù–´–ô –ó–ê–ö–ê–ó #{order.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.customer_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.customer_phone}
üìß <b>Email:</b> {order.customer_email}
üí∞ <b>–°—É–º–º–∞:</b> {order.total_price} —Ä—É–±.
üöö <b>–ê–¥—Ä–µ—Å:</b> {order.delivery_address}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {order.get_payment_method_display()}
‚è∞ <b>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã:</b> {order.paid_at.strftime('%d.%m.%Y %H:%M') if order.paid_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

<b>–¢–æ–≤–∞—Ä—ã:</b>
"""
        
        for item in order.orderitem_set.all():
            message += f"‚Ä¢ {item.product.name} x{item.quantity} - {item.get_total_price()} —Ä—É–±.\n"
        
        message += f"\n<b>–ò—Ç–æ–≥–æ:</b> {order.total_price} —Ä—É–±."
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': settings.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            NotificationLog.objects.create(
                order=order,
                notification_type='telegram_sent',
                message='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram',
                sent_to=f"Telegram chat: {settings.TELEGRAM_CHAT_ID}",
                success=True
            )
            return True
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            NotificationLog.objects.create(
                order=order,
                notification_type='telegram_sent',
                message=f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}',
                sent_to=f"Telegram chat: {settings.TELEGRAM_CHAT_ID}",
                success=False,
                error_message=response.text
            )
            return False
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}"
        print(error_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        NotificationLog.objects.create(
            order=order,
            notification_type='telegram_sent',
            message='–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram',
            success=False,
            error_message=str(e)
        )
        return False
    

def send_cancellation_notification(order):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"""
    try:
        if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
            return False
            
        message = f"""
‚ùå <b>–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù #{order.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.customer_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.customer_phone}
üí∞ <b>–°—É–º–º–∞:</b> {order.total_price} —Ä—É–±.
üïí <b>–í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã:</b> {timezone.now().strftime('%d.%m.%Y %H:%M')}
"""
        
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': settings.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
        return False

# API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ AJAX
def update_quantity_ajax(request, product_id):
    if request.method == 'POST' and request.user.is_authenticated:
        try:
            data = json.loads(request.body)
            new_quantity = data.get('quantity')
            
            product = get_object_or_404(Product, id=product_id)
            product.quantity = new_quantity
            product.save()
            
            return JsonResponse({'success': True, 'new_quantity': product.quantity})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    
    return JsonResponse({'success': False, 'error': 'Invalid request'})