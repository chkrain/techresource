# main/services/cardlink_service.py
import requests
import hashlib
import hmac
from django.conf import settings
from django.urls import reverse
from django.utils import timezone

class CardlinkService:
    def __init__(self):
        self.merchant_id = settings.CARDLINK_MERCHANT_ID
        self.secret_key = settings.CARDLINK_SECRET_KEY
        self.api_url = settings.CARDLINK_API_URL
        self.token = settings.CARDLINK_TOKEN
        self.is_test_mode = self._check_test_mode()
        
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

    def _check_test_mode(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        return any([
            'test' in (self.merchant_id or '').lower(),
            'test' in (self.secret_key or '').lower(), 
            'test' in (self.token or '').lower(),
            'sandbox' in (self.api_url or '').lower(),
            settings.DEBUG  # –í —Ä–µ–∂–∏–º–µ DEBUG –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
        ])

    def create_bill(self, order, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ Cardlink"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not all([self.merchant_id, self.secret_key, self.token]):
            print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cardlink –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º")
            return self._create_mock_bill(order, request)
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        if self.is_test_mode:
            print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º Cardlink, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock")
            return self._create_mock_bill(order, request)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞
            bill_data = {
                'amount': float(order.total_price),
                'currency': 'RUB',
                'order_id': str(order.id),
                'description': f'–ó–∞–∫–∞–∑ #{order.id}',
                'success_url': self._build_absolute_url(request, 'cardlink_payment_success', args=[order.id]),
                'fail_url': self._build_absolute_url(request, 'payment_failed', args=[order.id]),
                'callback_url': self._build_absolute_url(request, 'cardlink_webhook'),
                'refund_url': self._build_absolute_url(request, 'cardlink_webhook_refund'),
                'chargeback_url': self._build_absolute_url(request, 'cardlink_webhook_chargeback'),
                'custom': f'user_{order.user.id}',
                'client_email': order.customer_email,
                'client_name': order.customer_name,
            }

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
            bill_data['signature'] = self._generate_signature(bill_data)

            print(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Cardlink API: {self.api_url}/bill/create")
            print(f"üì¶ –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞: {bill_data}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Cardlink
            response = requests.post(
                f'{self.api_url}/bill/create',
                json=bill_data,
                headers=self.headers,
                timeout=30
            )

            print(f"üì° –û—Ç–≤–µ—Ç Cardlink: {response.status_code} - {response.text}")

            if response.status_code == 200:
                data = response.json()
                return {
                    'success': True,
                    'payment_url': data.get('payment_url'),
                    'bill_id': data.get('id'),
                    'data': data
                }
            else:
                return {
                    'success': False,
                    'error': f'Cardlink API error: {response.status_code} - {response.text}'
                }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Cardlink service: {str(e)}")
            return {
                'success': False,
                'error': f'Cardlink service error: {str(e)}'
            }

    def get_bill_status(self, bill_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞"""
        try:
            response = requests.get(
                f'{self.api_url}/bill/{bill_id}',
                headers=self.headers,
                timeout=30
            )

            if response.status_code == 200:
                return response.json()
            else:
                return None

        except Exception as e:
            print(f"Error getting bill status: {e}")
            return None

    def _generate_signature(self, data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Cardlink
        sign_string = f"{data['amount']}:{data['order_id']}:{self.secret_key}"
        return hashlib.md5(sign_string.encode()).hexdigest().upper()

    def _build_absolute_url(self, request, view_name, args=None):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ URL"""
        relative_url = reverse(view_name, args=args) if args else reverse(view_name)
        return request.build_absolute_uri(relative_url)

    def verify_callback_signature(self, data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            received_signature = data.get('SignatureValue', '')
            out_sum = data.get('OutSum', '')
            inv_id = data.get('InvId', '')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            sign_string = f"{out_sum}:{inv_id}:{self.secret_key}"
            calculated_signature = hashlib.md5(sign_string.encode()).hexdigest().upper()
            
            return received_signature == calculated_signature
        except Exception as e:
            print(f"Error verifying signature: {e}")
            return False
        
    def _create_mock_bill(self, order, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ mock —Å—á–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        mock_payment_url = self._build_absolute_url(request, 'cardlink_mock_process', args=[order.id])
        
        print(f"üß™ Mock —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞–Ω —Å—á–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
        print(f"üîó Mock URL: {mock_payment_url}")
        
        return {
            'success': True,
            'payment_url': mock_payment_url,
            'bill_id': f"mock_bill_{order.id}_{timezone.now().timestamp()}",
            'data': {
                'id': f"mock_bill_{order.id}",
                'payment_url': mock_payment_url,
                'status': 'created'
            }
        }